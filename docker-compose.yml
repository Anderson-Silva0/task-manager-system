version: '3.8'

services:
  postgres-user:
    image: postgres:15
    container_name: postgres-user
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: userdb
    volumes:
      - user-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d userdb"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 60s
    networks:
      - backend

  postgres-task:
    image: postgres:15
    container_name: postgres-task
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: taskdb
    volumes:
      - task-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d taskdb"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 60s
    networks:
      - backend

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    ports:
      - "8081:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-user:5432/userdb
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SERVICES_TASK_URL: http://task-service:8080
      SPRING_CLOUD_FEIGN_OKHTTP_ENABLED: "false"
    depends_on:
      postgres-user:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/users"]
      interval: 30s
      timeout: 20s
      retries: 5
      start_period: 180s
    networks:
      - backend

  task-service:
    build:
      context: ./task-service
      dockerfile: Dockerfile
    container_name: task-service
    ports:
      - "8082:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-task:5432/taskdb
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SERVICES_USER_URL: http://user-service:8080
      SPRING_CLOUD_FEIGN_OKHTTP_ENABLED: "false"
    depends_on:
      postgres-task:
        condition: service_healthy
      user-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/tasks"]
      interval: 30s
      timeout: 20s
      retries: 5
      start_period: 120s
    networks:
      - backend

  task-manager-ui:
    build:
      context: ./task-manager-ui
      dockerfile: Dockerfile
    container_name: angular-app
    ports:
      - "4200:4200"
    environment:
      - NODE_ENV=development
    volumes:
      - ./task-manager-ui/src:/app/src
      - ./task-manager-ui/package.json:/app/package.json
      - ./task-manager-ui/angular.json:/app/angular.json
      - ./task-manager-ui/tsconfig.json:/app/tsconfig.json
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4200"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 60s
    depends_on:
      task-service:
        condition: service_healthy
      user-service:
        condition: service_healthy
    networks:
      - backend

  cypress:
    build:
      context: ./task-manager-ui
      dockerfile: Dockerfile.cypress
    container_name: cypress-tests
    depends_on:
      task-manager-ui:
        condition: service_healthy
      task-service:
        condition: service_healthy
      user-service:
        condition: service_healthy
    environment:
      - CYPRESS_baseUrl=http://task-manager-ui:4200
    volumes:
      - ./task-manager-ui/cypress:/app/cypress
      - ./task-manager-ui/cypress.config.js:/app/cypress.config.js
      - ./task-manager-ui/cypress-results:/app/cypress-results
    networks:
      - backend
    command: sh -c "npx wait-on -t 120000 http://task-manager-ui:4200 && npx wait-on -t 60000 http://user-service:8080 && npx wait-on -t 60000 http://task-service:8080 && sleep 15 && npx cypress run --spec 'cypress/e2e/**/*.cy.js' --reporter junit --reporter-options 'mochaFile=cypress-results/results.xml,toConsole=true'"

volumes:
  user-db-data:
  task-db-data:

networks:
  backend:
    driver: bridge